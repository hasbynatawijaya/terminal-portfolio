{"version":3,"file":"bundle.js","mappings":"mBAAO,MAAMA,EAAeC,SAASC,eAAe,gBACvCC,EAAYF,SAASC,eAAe,UACjDF,EAAaI,iBAAiB,QAAQ,KAClCJ,EAAaK,OAAO,IAExBL,EAAaK,Q,swDCCAC,EAAW,CACpBC,KAAM,IACK,weASXC,MAAO,IACI,4BAA4B,WAEvCC,SAAU,KACN,IAAK,GAAwC,IAAxB,EAAaC,OAC9B,MAAO,qCAEX,IAAIC,EAAe,uBAAuB,kEAU1C,OARA,EAAaC,SAASC,IAClB,MAAMC,EAAQ,GACVD,EAAQE,QACRD,EAAME,KAAK,YAAYH,EAAQE,sCAEnCJ,GAAgB,6BAA6BE,EAAQI,gBAAgBH,EAAMI,KAAK,aAAa,IAEjGP,GAAgB,QACTA,CAAY,EAEvBQ,OAAQ,KACJ,IAAIC,EAAa,sFAkBjB,OAhBI,MAAwB,KAAqBV,OAAS,IACtDU,GAAc,oDAAoD,KAAqBF,KAAK,qBAE5F,MAAyB,KAAsBR,OAAS,IACxDU,GAAc,mDAAmD,KAAsBF,KAAK,qBAE5F,MAAwB,KAAqBR,OAAS,IACtDU,GAAc,wCAAwC,KAAqBF,KAAK,qBAEhF,MAAoB,KAAiBR,OAAS,IAC9CU,GAAc,iDAAiD,KAAiBF,KAAK,qBAErF,KAAoB,IAAiBR,OAAS,IAC9CU,GAAc,oCAAoC,IAAiBF,KAAK,qBAE5EE,GAAc,QACPA,CAAU,EAErBC,QAAS,IACE,iIAEwC,gEACV,SAAyB,2DAC3B,QAAuB,sCAG9DC,WAAY,KACR,IAAK,GAA4C,IAA1B,EAAeZ,OAClC,MAAO,8CAEX,IAAIa,EAAiB,iCAKrB,OAJA,EAAeX,SAASY,IACpBD,GAAkB,6BAA6BC,EAAIC,mBAAmBD,EAAIE,YAAYF,EAAIG,WAAWH,EAAII,kBAAkB,IAE/HL,GAAkB,QACXA,CAAc,EAEzBM,MAAO,KACH1B,EAAU2B,UAAY,GACf,IAEX,GAAI,IACO,IChFT,EAAe7B,SAASC,eAAe,gBACvC,EAAYD,SAASC,eAAe,UACpC6B,EAAc9B,SAASC,eAAe,YAE5C,EAAaE,iBAAiB,WAAW,SAAU4B,GAC/C,GAAkB,UAAdA,EAAMC,IAAiB,CACvB,MAAMC,EAAUC,KAAKC,MAAMC,OAC3BF,KAAKC,MAAQ,GACb,MAAME,EAASrC,SAASsC,cAAc,KAGtC,GAFAD,EAAOR,UAAY,kFAAkFI,WACrG,EAAUM,YAAYF,GAClBhC,EAASmC,eAAeP,GAAU,CAClC,MAAMQ,EAAgBpC,EAAS4B,KACzBS,EAAW1C,SAASsC,cAAc,OACxCI,EAASC,UAAUC,IAAI,SAAU,UACjCF,EAASb,UACoB,iBAAlBY,EACDA,EACAA,EAAcZ,UACxB,EAAUU,YAAYG,EAC1B,KACK,CACD,MAAMG,EAAW7C,SAASsC,cAAc,KACxCO,EAASF,UAAUC,IAAI,SAAU,UACjCC,EAAShB,UAAY,oDAAoDI,mFACzE,EAAUM,YAAYM,EAC1B,CACA,EAAUC,UAAY,EAAUC,aAChCjB,EAAYgB,UAAYhB,EAAYiB,YACxC,CACJ,IACA,EAAa5C,iBAAiB,QAAQ,KAClC,EAAaC,OAAO,IAExB,EAAaA,O","sources":["webpack://terminal-portfolio/./src/modules/ui.ts","webpack://terminal-portfolio/./src/modules/commands.ts","webpack://terminal-portfolio/./src/index.ts"],"sourcesContent":["export const commandInput = document.getElementById(\"commandInput\");\nexport const outputDiv = document.getElementById(\"output\");\ncommandInput.addEventListener(\"blur\", () => {\n    commandInput.focus();\n});\ncommandInput.focus();\n","import { outputDiv } from \"./ui\";\nimport aboutData from \"../data/about.json\";\nimport contactData from \"../data/contact.json\";\nimport projectsData from \"../data/projects.json\";\nimport skillsData from \"../data/skills.json\";\nimport experienceData from \"../data/experience.json\";\nexport const commands = {\n    help: () => {\n        return `<p>Available commands:</p>\n            <ul>\n                <li><span class=\"command\">about</span>: Learn more about me.</li>\n                <li><span class=\"command\">projects</span>: View my projects.</li>\n                <li><span class=\"command\">skills</span>: See my technical skills.</li>\n                <li><span class=\"command\">contact</span>: Get in touch with me.</li>\n                <li><span class=\"command\">clear</span>: Clear the terminal.</li>\n            </ul>`;\n    },\n    about: () => {\n        return `<p class=\"typing-result\">${aboutData.description}</p>`;\n    },\n    projects: () => {\n        if (!projectsData || projectsData.length === 0) {\n            return `<p>No projects to display yet.</p>`;\n        }\n        let projectsList = `<p>Here are some of ${aboutData.name}'s featured projects:</p>\n                            <ul>`;\n        projectsData.forEach((project) => {\n            const links = [];\n            if (project.github) {\n                links.push(`<a href=\"${project.github}\" target=\"_blank\">GitHub</a>`);\n            }\n            projectsList += `<li><span class=\"command\">${project.name}</span>: ${links.join(\" | \")}</li>`;\n        });\n        projectsList += `</ul>`;\n        return projectsList;\n    },\n    skills: () => {\n        let skillsText = `<p>My key skills include:</p>\n                          <ul class=\"typing-result\">`;\n        if (skillsData.languages && skillsData.languages.length > 0) {\n            skillsText += `<li>Programming Languages: <span class=\"command\">${skillsData.languages.join(\", \")}</span></li>`;\n        }\n        if (skillsData.frameworks && skillsData.frameworks.length > 0) {\n            skillsText += `<li>Frameworks/Libraries: <span class=\"command\">${skillsData.frameworks.join(\", \")}</span></li>`;\n        }\n        if (skillsData.databases && skillsData.databases.length > 0) {\n            skillsText += `<li>Databases: <span class=\"command\">${skillsData.databases.join(\", \")}</span></li>`;\n        }\n        if (skillsData.cloud && skillsData.cloud.length > 0) {\n            skillsText += `<li>Cloud Technologies: <span class=\"command\">${skillsData.cloud.join(\", \")}</span></li>`;\n        }\n        if (skillsData.other && skillsData.other.length > 0) {\n            skillsText += `<li>Other: <span class=\"command\">${skillsData.other.join(\", \")}</span></li>`;\n        }\n        skillsText += `</ul>`;\n        return skillsText;\n    },\n    contact: () => {\n        return `<p>You can reach me at:</p>\n                <ul class=\"typing-result\">\n                    <li>Email: <span class=\"command\">${contactData.email}</span></li>\n                    <li>LinkedIn: <a href=\"${contactData.linkedin}\">${contactData.linkedin}</a></li>\n                    <li>GitHub: <a href=\"${contactData.github}\">${contactData.github}</a></li>\n                </ul>`;\n    },\n    experience: () => {\n        if (!experienceData || experienceData.length === 0) {\n            return `<p>No experience information available.</p>`;\n        }\n        let experienceList = `<p>My work experience:</p><ul>`;\n        experienceData.forEach((exp) => {\n            experienceList += `<li><span class=\"command\">${exp.title}</span> at ${exp.company} (${exp.years}): ${exp.description}</li>`;\n        });\n        experienceList += `</ul>`;\n        return experienceList;\n    },\n    clear: () => {\n        outputDiv.innerHTML = \"\";\n        return \"\";\n    },\n    \"\": () => {\n        return \"\";\n    },\n};\n","import { commands } from \"./modules/commands\";\nconst commandInput = document.getElementById(\"commandInput\");\nconst outputDiv = document.getElementById(\"output\");\nconst terminalDiv = document.getElementById(\"terminal\");\nimport \"./assets/styles/terminal.scss\";\ncommandInput.addEventListener(\"keydown\", function (event) {\n    if (event.key === \"Enter\") {\n        const command = this.value.trim();\n        this.value = \"\";\n        const output = document.createElement(\"p\");\n        output.innerHTML = `<span class=\"prompt\">guest@hasbyportfolio:~$</span> <span style=\"color: #eee;\">${command}</span>`;\n        outputDiv.appendChild(output);\n        if (commands.hasOwnProperty(command)) {\n            const commandOutput = commands[command]();\n            const response = document.createElement(\"div\");\n            response.classList.add(\"output\", \"typing\");\n            response.innerHTML =\n                typeof commandOutput === \"string\"\n                    ? commandOutput\n                    : commandOutput.innerHTML;\n            outputDiv.appendChild(response);\n        }\n        else {\n            const notFound = document.createElement(\"p\");\n            notFound.classList.add(\"output\", \"typing\");\n            notFound.innerHTML = `<span style=\"color: #ff6b6b;\">Command not found: ${command}.</span> Type <span style=\"color: #d19a66;\">help</span> for available commands.`;\n            outputDiv.appendChild(notFound);\n        }\n        outputDiv.scrollTop = outputDiv.scrollHeight;\n        terminalDiv.scrollTop = terminalDiv.scrollHeight;\n    }\n});\ncommandInput.addEventListener(\"blur\", () => {\n    commandInput.focus();\n});\ncommandInput.focus();\n"],"names":["commandInput","document","getElementById","outputDiv","addEventListener","focus","commands","help","about","projects","length","projectsList","forEach","project","links","github","push","name","join","skills","skillsText","contact","experience","experienceList","exp","title","company","years","description","clear","innerHTML","terminalDiv","event","key","command","this","value","trim","output","createElement","appendChild","hasOwnProperty","commandOutput","response","classList","add","notFound","scrollTop","scrollHeight"],"sourceRoot":""}